<?php

/**
 * Description of BsaleShutdown
 * clase para manejar el shutdown de php
 *
 * @author Jason
 */
class BsaleShutdown
{

    public $exceptions = [
        E_ERROR => "E_ERROR",
        E_WARNING => "E_WARNING",
        E_PARSE => "E_PARSE",
        E_NOTICE => "E_NOTICE",
        E_CORE_ERROR => "E_CORE_ERROR",
        E_CORE_WARNING => "E_CORE_WARNING",
        E_COMPILE_ERROR => "E_COMPILE_ERROR",
        E_COMPILE_WARNING => "E_COMPILE_WARNING",
        E_USER_ERROR => "E_USER_ERROR",
        E_USER_WARNING => "E_USER_WARNING",
        E_USER_NOTICE => "E_USER_NOTICE",
        E_STRICT => "E_STRICT",
        E_RECOVERABLE_ERROR => "E_RECOVERABLE_ERROR",
        E_DEPRECATED => "E_DEPRECATED",
        E_USER_DEPRECATED => "E_USER_DEPRECATED",
        E_ALL => "E_ALL"
    ];

    public function register_shutdown()
    {
        register_shutdown_function(array( $this, 'callRegisteredShutdown' ));
        //set_error_handler();
        //set_exception_handler();
    }

    public function callRegisteredShutdown()
    {
        $hoy = date('Y-m-d H:i:s');
        //catch error
        $error = error_get_last();

        //hay error?
        if( isset($error['type']) )
        {
            $errno = $error['type'];
            $errfile = $error['file'];
            $errline = $error['line'];
            $errstr = $error['message'];
        }
        //no error
        else
        {
            return;
        }

        //solo errores del plugin
        if( strpos($errfile, 'woocommerce-bsalev2') !== false )
        {
            
        }
        else
        {
            return;
        }


        $error_str = isset($this->exceptions[$errno]) ? $this->exceptions[$errno] : $errno;

        //E_WARNING (int) 	Run-time warnings (non-fatal errors). Execution of the script is not halted. 
        //E_PARSE (int) 	Compile-time parse errors. Parse errors should only be generated by the parser. 
        //E_NOTICE (int) 	Run-time notices. Indicate that the script encountered something that could indicate an error, 
        //but could also happen in the normal course of running a script. 
        //E_CORE_ERROR (int) 	Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP. 
        //E_CORE_WARNING (int) 	Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP. 
        //E_COMPILE_ERROR (int) 	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine. 
        //E_COMPILE_WARNING (int) 	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine. 
        //E_USER_ERROR (int) 	User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error(). 
        //E_USER_WARNING (int) 	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error(). 
        //E_USER_NOTICE (int) 	User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error(). 
        //E_STRICT (int) 	Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code. 
        //E_RECOVERABLE_ERROR (int) 	Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR. 
        //E_DEPRECATED (int) 	Run-time notices. Enable this to receive warnings about code that will not work in future versions. 	
        //E_USER_DEPRECATED (int) 	User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error(). 
        //E_ALL (int) 	All errors, warnings, and notices. 
        //
        //E_ERROR: Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem.

        $msg = '';

        if( $errno === E_ERROR )
        {
            // fatal error has occured
            $msg .= "[$hoy]: Error fatal: '$error_str' en archivo $errfile, línea $errline. Mensaje: '$errstr'.\n";
        }
        else
        {
            $msg .= "[$hoy]: Error: '$error_str' en archivo $errfile, línea $errline. Mensaje: '$errstr'.\n";
        }

        // Execution of the script is halted. 
        //timeout
        if( connection_status() == CONNECTION_TIMEOUT )
        {
            $msg .= "$hoy: TIMEOUT error='$error_str' en archivo $errfile, línea $errline. Mensaje: '$errstr'.\n";
        }

        //log de error
        if( !empty($msg) )
        {
            $this->log($msg);
        }
    }

    public function log($msg)
    {
        $hoy = date('Y-m-d');
        $fichero = dirname(__FILE__) . "/../logs/shutdown_error_{$hoy}.log";
        file_put_contents($fichero, $msg, FILE_APPEND | LOCK_EX);
    }

    public function loginfo($msg)
    {
        $hoy = date('Y-m-d');
        $fichero = dirname(__FILE__) . "/../logs/log_info_{$hoy}.log";
        file_put_contents($fichero, $msg, FILE_APPEND | LOCK_EX);
    }
}
